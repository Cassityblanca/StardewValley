using System;
using System.Threading;
using System.Collections.Generic;
using Microsoft.Xna.Framework;
using StardewModdingAPI;
using StardewModdingAPI.Events;
using StardewValley;
using StardewValley.Menus;

namespace MPSpeechBubbles
{

	//TODO: Remove existing bubble
	//TODO: Timer per player?


	/// <summary>The mod entry point.</summary>
	public class ModEntry : Mod
	{
		private int drawTimer = 0;
		private int drawLifetimeMinimum = 2;
		private IList<ChatMessage> ChatMessages;
		private int chatCount;
		Queue<KeyValuePair<Farmer, String>> toSpeak = new Queue<KeyValuePair<Farmer, String>>();

		//List<Tuple<Farmer, string>> toSpeak = new List<Tuple<Farmer, string>>();

		// --Public Methods
		/**
		 * Entry is required
		**/
		public override void Entry(IModHelper helper)
		{
			//On day start/gameload, set a reference to chatBox
			TimeEvents.AfterDayStarted += delegate (object o, EventArgs e)
			{
				this.ChatMessages = this.Helper.Reflection.GetField<List<ChatMessage>>(Game1.chatBox, "messages").GetValue();
				GameEvents.UpdateTick += this.DrawBubbleTimer;
				GameEvents.HalfSecondTick += this.BubbletimerHelper;
				this.chatCount = this.ChatMessages.Count;

				//Draw bubble
				GraphicsEvents.OnPreRenderHudEvent += this.DrawBubble;
			};

			GameEvents.UpdateTick += CheckChat;
		}

		// --Private Methods
		private void CheckChat(object sender, EventArgs e)
		{
			if (!Context.IsWorldReady)
				return;

			if (this.ChatMessages.Count != chatCount)
			{
				this.Monitor.Log($"Spawning bubble");
				SpawnBubble();
			}
		}

		/**
		 * Checks through all new messages and creates a speech bubble above appropriate player.
		 * Removes existing bubble if present.
		 */
		public void SpawnBubble()
		{
			//			if (!Context.IsMultiplayer)
			//				return;
			String speaker = "";

			//For each new message
			for (int i = this.ChatMessages.Count - chatCount; i > 0; i--)
			{
				this.Monitor.Log($"{i} messages since last call");

				//Parse the message
				//todo: - i
				String message = ChatMessage.makeMessagePlaintext(this.ChatMessages[this.ChatMessages.Count - 1].message);

				if (message.Length > 1)
				{
					speaker = message.Substring(0, message.IndexOf(':'));
					message = message.Substring(message.IndexOf(':') + 1);
				}

				//Find the proper farmer
				foreach(Farmer me in Game1.getAllFarmers())
				{

					this.Monitor.Log($"{me.Name} is being considered for talking. We are looking for: :{speaker}:");

					if (me.Name.Equals(speaker))
					{
						//TODO: If this player is already speaking, handle it.
						this.Monitor.Log($"{me.Name} is going to talk");
						toSpeak.Enqueue(new KeyValuePair<Farmer, String>(me, message));

						//Start Timer
						this.drawTimer += (drawLifetimeMinimum + (message.Length / 30))* 60;

						break;
					}

				}
			}
			this.chatCount = this.ChatMessages.Count;
		}

		struct SpeechBubble
		{
			DateTime TimeAppeared;
			string Text;
		}


		//DateTime.Now - start
		//you can just increase the y component of the vector to move the speech bubble up
		//Remember each tile is scaled up by 4? So 192/64 = 3, which is approximately a tile above the player's head

		/*
		 * 

			for (int i = 0; i < bubbles.Length; i++) {
				var bubble = bubbles[i];
				DrawBubbleTextWithYOffset(bubble.Text, i * someYOffset);
			}
		 * 
		 */

		private void DrawBubbleTimer(object sender, EventArgs e)
		{

			if (this.drawTimer < -1)
			{
				this.drawTimer = -1;
				return;
			}

			if (--this.drawTimer % (this.drawLifetimeMinimum * 60) == 0)
			{
				if (toSpeak.Count > 0)
					toSpeak.Dequeue();
				return;
			}
		}

		private void BubbletimerHelper(object sender, EventArgs e)
		{
			this.Monitor.Log($"Timer: {this.drawTimer}. Lifetime: {this.drawLifetimeMinimum*60}. Mod: {this.drawTimer % (drawLifetimeMinimum * 60)}");
		}

		public void DrawBubble(object sender, EventArgs e)
		{
			foreach (KeyValuePair<Farmer, String> speaker in toSpeak)
				(speaker.Key).DrawSpeechBubble(speaker.Value, Color.Red, 1);
		}
	}
}


//[MPSpeechBubbles] This mod failed in the GameEvents.UpdateTick event. Technical details:
//System.ArgumentOutOfRangeException: Length cannot be less than zero.
//Parameter name: length
//   at System.String.Substring(Int32 startIndex, Int32 length)
//   at MPSpeechBubbles.ModEntry.SpawnBubble() in C:\Users\Kal\Documents\GitHub\StardewValley\MPSpeechBubbles\MPSpeechBubbles\ModEntry.cs:line 75
//   at MPSpeechBubbles.ModEntry.CheckChat(Object sender, EventArgs e) in C:\Users\Kal\Documents\GitHub\StardewValley\MPSpeechBubbles\MPSpeechBubbles\ModEntry.cs:line 51
//   at StardewModdingAPI.Framework.Events.ManagedEvent.Raise() in C:\source\_Stardew\SMAPI\src\SMAPI\Framework\Events\ManagedEvent.cs:line 110
//occured when said  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa', or maybe with more a's